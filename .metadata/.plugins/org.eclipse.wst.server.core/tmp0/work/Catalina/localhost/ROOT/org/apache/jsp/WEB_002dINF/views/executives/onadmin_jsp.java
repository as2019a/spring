/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2019-01-30 03:05:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.executives;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class onadmin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/increpas/spring/example/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ch19_project_mavenwebsite/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1544682339013L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" \r\n");
      out.write(" \t  content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<title>Executives Web Page</title>\r\n");
      out.write("<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.5.0/css/all.css\">\r\n");
      out.write("<style>\r\n");
      out.write("\t.jumbotron{\r\n");
      out.write("\t\tmargin-bottom: 5px;\r\n");
      out.write("\t\ttext-align:center;\r\n");
      out.write("\t\tbackground-clip:padding-box;\r\n");
      out.write("\t\tbackground-color:#A3CB38;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.jumbotron:hover{\r\n");
      out.write("\t\tcolor:olive;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.col-cm-3{\r\n");
      out.write("\t\theight: 100%;\r\n");
      out.write("\t}\r\n");
      out.write("    /* Set height of the grid so .sidenav can be 100% (adjust as needed) */\r\n");
      out.write("    .row.content {height: 550px}\r\n");
      out.write("    \r\n");
      out.write("    /* Set gray background color and 100% height */\r\n");
      out.write("    .sidenav {\r\n");
      out.write("      background-color: #f1f1f1;\r\n");
      out.write("      height: 100%;\r\n");
      out.write("    }\r\n");
      out.write("        \r\n");
      out.write("    /* On small screens, set height to 'auto' for the grid */\r\n");
      out.write("    @media screen and (max-width: 767px) {\r\n");
      out.write("      .row.content {height: auto;} \r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"jumbotron\">\r\n");
      out.write("\t    <h1> Executives Private Page</h1>      \r\n");
      out.write("\t    <h3>본 기업 사내 간부전용 페이지 입니다.</h3>\r\n");
      out.write("\t    <p><b>접근권한 : admin(본 기업 간부(임원)에 한해 가능합니다.)</b></p>    \r\n");
      out.write("\t</div>\r\n");
      out.write("\t<nav class=\"navbar navbar-inverse visible-xs\">\r\n");
      out.write("\t  <div class=\"container-fluid\">\r\n");
      out.write("\t    <div class=\"navbar-header\">\r\n");
      out.write("\t      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\r\n");
      out.write("\t        <span class=\"icon-bar\"></span>\r\n");
      out.write("\t        <span class=\"icon-bar\"></span>\r\n");
      out.write("\t        <span class=\"icon-bar\"></span>                        \r\n");
      out.write("\t      </button>\r\n");
      out.write("\t      <a class=\"navbar-brand\" href=\"executives/onadmin\">Executives Private Page</a>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t    <div class=\"collapse navbar-collapse\" id=\"myNavbar\">\r\n");
      out.write("\t      <ul class=\"nav navbar-nav\">\r\n");
      out.write("\t        <li class=\"active\"><a href=\"/main\">Main</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/executboard\">Executboard</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/maps\">Maps</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/etiquettes\">Etiquette</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/\"></a></li>\r\n");
      out.write("\t      </ul>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t</nav>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"container-fluid\">\r\n");
      out.write("\t  <div class=\"row content\">\r\n");
      out.write("\t    <div class=\"col-sm-3 sidenav hidden-xs\">\r\n");
      out.write("\t      <h2>Executives Private Page</h2>\r\n");
      out.write("\t      <ul class=\"nav nav-pills nav-stacked\">\r\n");
      out.write("\t        <li class=\"active\"><a href=\"/main\">Main</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/executboard\">Executboard</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/maps\">Maps</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/etiquettes\">Etiquette</a></li>\r\n");
      out.write("\t        <li><a href=\"executives/\"></a></li>\r\n");
      out.write("\t      </ul><br>\r\n");
      out.write("\r\n");
      out.write("\t    <br>\r\n");
      out.write("\t\t    <div class=\"col-sm-9\">\r\n");
      out.write("\t\t      <div class=\"col-cm-3\">\r\n");
      out.write("\t\t      \t<h5></h5>\r\n");
      out.write("\t\t      </div>\r\n");
      out.write("\t\t      <div class=\"col-cm-3\">\r\n");
      out.write("\t\t      \t<h5>2</h5>\r\n");
      out.write("\t\t      </div>\r\n");
      out.write("\t\t      <div class=\"col-cm-3\">\r\n");
      out.write("\t\t      \t<h5>3</h5>\r\n");
      out.write("\t\t      </div>\r\n");
      out.write("\t\t    </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
