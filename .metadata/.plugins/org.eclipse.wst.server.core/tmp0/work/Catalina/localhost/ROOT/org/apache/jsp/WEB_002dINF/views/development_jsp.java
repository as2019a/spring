/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2019-01-31 02:52:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class development_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/increpas/spring/example/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ch19_project_mavenwebsite/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-4.2.6.RELEASE.jar", Long.valueOf(1546822982153L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1544682339013L));
    _jspx_dependants.put("jar:file:/C:/increpas/spring/example/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ch19_project_mavenwebsite/WEB-INF/lib/spring-security-taglibs-4.2.6.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1525766420000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" \r\n");
      out.write(" \t  content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<title>THE Development Page</title>\r\n");
      out.write("<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.5.0/css/all.css\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t.jumbotron{\r\n");
      out.write("\t\tmargin-bottom: 5px;\r\n");
      out.write("\t\tbackground-color:#fbc531;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\th5{\r\n");
      out.write("\t\ttext-align:center;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#sa:hover{\r\n");
      out.write("\t\tcolor:fuchsia;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#sc:hover{\r\n");
      out.write("\t\tcolor:orange;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#sf:hover{\r\n");
      out.write("\t\tcolor:lime;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttable {\r\n");
      out.write("\t  font-family: arial, sans-serif;\r\n");
      out.write("\t  border-collapse: collapse;\r\n");
      out.write("\t  width: 100%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttd, th {\r\n");
      out.write("\t  border: 1px solid #dddddd;\r\n");
      out.write("\t  text-align:center;\r\n");
      out.write("\t  padding: 8px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttr:nth-child(even) {\r\n");
      out.write("\t  background-color: #dddddd;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.cmd {\r\n");
      out.write("\t  background-color: black;\r\n");
      out.write("\t  color: white;\r\n");
      out.write("\t  margin: 1px;\r\n");
      out.write("\t  padding: 80px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.footer{\r\n");
      out.write("\t\theight: 100px;\r\n");
      out.write("\t\tline-height: 100px;\r\n");
      out.write("\t\tbackground-color: #ff4757;\r\n");
      out.write("\t\tcolor: white;\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t\tmargin-top: 200px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"jumbotron\">\r\n");
      out.write("\t\t<h1 class=\"text-center\" style=\"\">THE Development Page</h1>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t  <div class=\"row\">\r\n");
      out.write("\t  \t<div class=\"col-sm-12\">\r\n");
      out.write("\t  \t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t  \t\t\t<a href=\"/main\" type=\"button\" class=\"btn btn-info\">Main Link</a>\r\n");
      out.write("\t  \t\t\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"alertsone();\" data-toggle=\"modal\" data-target=\"#myModal\">\r\n");
      out.write("\t  \t\t\tAlert Link</button>\r\n");
      out.write("\t  \t\t</div>\r\n");
      out.write("\t  \t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t  \t\t\t<ul>\r\n");
      out.write("\t  \t\t\t\t<li><button class=\"btn btn-primary\" data-toggle=\"modal\" id=\"modalBtn\">Alert Dialog</button></li>\r\n");
      out.write("\t\t\t\t\t<li><button class=\"btn btn-primary\" data-toggle=\"modal\" id=\"modalBtn2\">Alert Dialog no object</button></li>\r\n");
      out.write("\t\t\t\t\t<li><button class=\"btn btn-primary\" data-toggle=\"modal\" id=\"modalBtn1\">Confirm Dialog</button></li>\r\n");
      out.write("\t  \t\t\t</ul>\r\n");
      out.write("\t  \t\t</div>\r\n");
      out.write("\t  \t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t  \t\t\t<h5 id=\"sc\">Side Bar</h5>\r\n");
      out.write("\t  \t\t</div>\r\n");
      out.write("\t  \t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t  \t\t\t<h5 id=\"sf\">Side Bar</h5>\r\n");
      out.write("\t  \t\t</div>\r\n");
      out.write("\t  \t</div>\r\n");
      out.write("\t    <div class=\"col-xs-12\">\r\n");
      out.write("\t    \t<div class=\"col-xs-4\">\r\n");
      out.write("\t    \t\t<div class=\"alert alert-info\">\r\n");
      out.write("\t    \t\t\t<h4 style=\"font-size:large;text-align:center;\">개발자를 위한 도구</h4>\r\n");
      out.write("\t    \t\t\t<table>\r\n");
      out.write("\t    \t\t\t\t<caption class=\"text-center\">개발자 도구(툴)</caption>\r\n");
      out.write("\t    \t\t\t\t<caption class=\"text-center\">Server, Code BackUp</caption>\r\n");
      out.write("\t    \t\t\t\t<thead>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<th>순번</th>\r\n");
      out.write("\t    \t\t\t\t\t\t<th>개발 도구</th>\r\n");
      out.write("\t    \t\t\t\t\t\t<th>개발 툴 제작 기업</th>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>1</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>STS(이클립스)</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>이클립스</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>2</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>파이썬</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>파이썬</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>3</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>오라클</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>오라클</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>4</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>MySQL</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>MYSQL</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>5</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Maven</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Maven</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>6</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Spring</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Spring</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>7</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Orcale</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Orcale</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>8</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>리눅스</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>리눅스</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>9</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>우분투</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>우분투</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>10</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Git</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Git</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>11</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>GitHub</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>GitHub</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>12</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Tomcat</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Tomcat</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t\t<tr>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>13</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Chrome</td>\r\n");
      out.write("\t    \t\t\t\t\t\t<td>Google</td>\r\n");
      out.write("\t    \t\t\t\t\t</tr>\r\n");
      out.write("\t    \t\t\t\t</thead>\r\n");
      out.write("\t    \t\t\t\t\r\n");
      out.write("\t    \t\t\t</table>\r\n");
      out.write("\t    \t\t</div>\r\n");
      out.write("\t    \t</div>\r\n");
      out.write("\t    \t<div class=\"col-xs-4\">\r\n");
      out.write("\t    \t\t<h2 style=\"font-size:large;text-align:center;\">개발자가 해야하는 업무</h2>\r\n");
      out.write("\t    \t\t<h5>1.개요</h5>\r\n");
      out.write("\t    \t\t<p>\r\n");
      out.write("\t    \t\t원래는 모든 분야의 개발에 대해 사용되는 용어다. \r\n");
      out.write("\t    \t\t그런데 대한민국에서는 개발자라고 하면 주로 '소프트웨어 개발자'를 떠올리곤 한다. \r\n");
      out.write("\t    \t\t이것은 외국도 마찬가지라서 위키백과에서 Developer를 검색해보면 Software Developer와 Game Developer가 나온다. Developer라는 용어가 사용되는 또 다른 중요한 분야인 부동산 개발 분야는 우리나라에서는 오히려 '디벨로퍼'라는 단어가 사용되고 있다. \r\n");
      out.write("\t    \t\t영미권에서는 Developer 를 줄인 Dev라는 이름으로 불리는 일도 많다.\r\n");
      out.write("\t    \t\t</p>\r\n");
      out.write("\t    \t\t<h5>2.JAVA</h5>\r\n");
      out.write("\t    \t\t<p>\r\n");
      out.write("\t    \t\tJava의 가장 큰 특징은 플랫폼에 독립적인 언어라는 점이다. 소스 코드를 기계어로 직접 컴파일하여 링크하는 C/C++의 컴파일러와 달리 자바 컴파일러는 바이트코드인 클래스 파일(.class)을 생성하고, 이 파일의 바이트코드를 읽은 뒤 기계어로 바꾸어 실행하는 것은 Java Virtual Machine(JVM)이다.\r\n");
      out.write("\t\t\t\t예를 들어 C 계열 언어들은 윈도우에서 빌드한 프로그램을 그대로 리눅스나 macOS에서 실행하려 하면 일반적으로 오류가 나지만 Java로 작성 된 프로그램은 플랫폼에 맞는 JVM만 설치되어 있다면 문제 없이 동작한다. 이는 Java 코드 자체가 플랫폼이 아닌 가상머신에 종속적이라는 점, 그리고 프로그램 실행의 주체가 운영체제가 아닌 JVM이기 때문이며 이러한 점을 통틀어 플랫폼 종속성이 낮은 언어라고 표현한다.\r\n");
      out.write("\t\t\t\tJVM 기반의 프로젝트에서는 하나의 언어만을 고집하지 않는다. 스크립트 언어가 유리(간결하고 짧은 소스코드)한 부분은 Groovy로 작업하고, 함수형 언어가 유리(최근 유행하는 빅데이터 등)한 부분은 Scala로 작업하며, 견고한 인터페이스와 대규모 통합이 필요한 곳은 Java로 작업한 뒤 이들을 서로 합쳐서 운영하는 게 가능하다. (Java에서 만든 객체를 Scala에서 그대로 사용할 수 있다.)\r\n");
      out.write("\t\t\t\t실제 현업에서는 Java와 통합해서 몇몇 인기 언어가 자주 사용되므로 장단점을 잘 알아두는게 좋다. '내가 사용하는 언어를 까는 건 참을 수 없어!'라는 태도보다는 환경이나 주어진 작업의 특성에 따라 적합한 언어를 선택할 수 있는 지혜가 필요하다.\r\n");
      out.write("\t    \t\t</p>\r\n");
      out.write("\t    \t</div>\r\n");
      out.write("\t    \t<div class=\"col-xs-4\">\r\n");
      out.write("\t    \t\t<p>Maven Company website:</p>\r\n");
      out.write("\t\t\t\t<blockquote cite=\"http://localhost:8080/main\">\r\n");
      out.write("\t\t\t\t본 기업에서는 많은 웹사이트를 개발하고 있습니다. 개발할때는 푸른색 Alert창에\r\n");
      out.write("\t\t\t\t있는 Table(고정) 목록에 있는 개발 툴(부트스트랩 포함)을 가지고 하고 직원 간에\r\n");
      out.write("\t\t\t\t협업으로 개발하며 서로 공유시에는 Git과 GitHub로 공유하며 비공개를 원칙으로 \r\n");
      out.write("\t\t\t\tprivate로 하고 public으로 하게되면 소스공개가 되기때문에 비공개 협업자들 간\r\n");
      out.write("\t\t\t\t공개를 원칙으로 하고 있습니다. 개발자는 상당히많은 급여를 받고 있는 직업으로\r\n");
      out.write("\t\t\t\t프로젝트가 시작되면 개발자 툴과 언어를 사용하여 코드(소스)작성 및 코드 분석을\r\n");
      out.write("\t\t\t\t합니다.\r\n");
      out.write("\t\t\t\t</blockquote>\r\n");
      out.write("\t\t\t\t<div class=\"cmd\">\r\n");
      out.write("\t\t\t\t\t<h2>Cmd DOS</h2>\r\n");
      out.write("\t\t\t\t\t<p>Cmd DOS에서는 명령어를 사용합니다.</p>\r\n");
      out.write("\t\t\t\t</div> \r\n");
      out.write("\t    \t</div>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"footer\">\r\n");
      out.write("\t\t<p class=\"text-center\" style=\"\">THE Development Page</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tfunction alertsone(){\r\n");
      out.write("\t\t\tfor(var k = 1; k < 10; k++){\r\n");
      out.write("\t\t\t\tMessage: {\r\n");
      out.write("\t\t\t\t\ttitle: '알립니다. 여기는 개발자를 위한 공간입니다.'\r\n");
      out.write("\t\t\t\t\tok: '확인'\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\tdialog.modal('show');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\tvar Common = {};\r\n");
      out.write("\t\t\tCommon.Dialog = {\r\n");
      out.write("\t\t\t    /**\r\n");
      out.write("\t\t\t    * Dialog Id\r\n");
      out.write("\t\t\t    */\r\n");
      out.write("\t\t\t    DialogInfo: {\r\n");
      out.write("\t\t\t        titleId: 'common-modal-title',\r\n");
      out.write("\t\t\t        okBtnId: 'common-modal-ok-btn',\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    /**\r\n");
      out.write("\t\t\t    * Default Item Message\r\n");
      out.write("\t\t\t    */\r\n");
      out.write("\t\t\t    Message: {\r\n");
      out.write("\t\t\t        title: '알림',\r\n");
      out.write("\t\t\t        ok: '확인',\r\n");
      out.write("\t\t\t        cancel: '취소'\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    /**\r\n");
      out.write("\t\t\t    * Element 생성\r\n");
      out.write("\t\t\t    *\r\n");
      out.write("\t\t\t    * @param elementTag Element Tag\r\n");
      out.write("\t\t\t    * @param attributeData Set Attribute Object\r\n");
      out.write("\t\t\t    * @param appendElement AppendChild Element Object\r\n");
      out.write("\t\t\t    * @return Element Object    \r\n");
      out.write("\t\t\t    */\r\n");
      out.write("\t\t\t    createElement: function(elementTag, attributeData, appendElement){\r\n");
      out.write("\t\t\t        // Element 생성\r\n");
      out.write("\t\t\t        var elementObj = document.createElement(elementTag);\r\n");
      out.write("\t\t\t        // Attrbute 추가\r\n");
      out.write("\t\t\t        for(var key in attributeData){\r\n");
      out.write("\t\t\t            //console.log(key, attrbutes[key]);\r\n");
      out.write("\t\t\t            elementObj.setAttribute(key, attributeData[key]);\r\n");
      out.write("\t\t\t        };\r\n");
      out.write("\t\t\t        // Element Append        \r\n");
      out.write("\t\t\t        if(appendElement){\r\n");
      out.write("\t\t\t            appendElement.appendChild(elementObj);\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        return elementObj;\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    /**\r\n");
      out.write("\t\t\t    * Modal Dialog Make\r\n");
      out.write("\t\t\t    */\r\n");
      out.write("\t\t\t    makeModalDialog: function(data){\r\n");
      out.write("\t\t\t        // UUID 생성\r\n");
      out.write("\t\t\t        var uuid;\r\n");
      out.write("\t\t\t        if(typeof(Util) === 'object' && typeof(Util.uuid) === 'function'){\r\n");
      out.write("\t\t\t            uuid = Util.uuid();\r\n");
      out.write("\t\t\t        }else{\r\n");
      out.write("\t\t\t            uuid = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n");
      out.write("\t\t\t                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n");
      out.write("\t\t\t                return v.toString(16);\r\n");
      out.write("\t\t\t            });\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // Dialog Id\r\n");
      out.write("\t\t\t        data.dialogId = 'common-modal-dialog-' + data.dialogType + '-' + uuid;\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        /***************************************************************************/\r\n");
      out.write("\t\t\t        // ---------------- Modal Main Div ----------------\r\n");
      out.write("\t\t\t        var modalDiv = this.createElement('div'\r\n");
      out.write("\t\t\t            , {'id': data.dialogId,'class': 'modal fase','tabindex': '-1','role': 'dialog','aria-labelledby': this.DialogInfo.titleId,'aria-hidden': 'true'}\r\n");
      out.write("\t\t\t            , document.body);\r\n");
      out.write("\t\t\t        var modalDialogDiv = this.createElement('div', {'class': 'modal-dialog'}, modalDiv);\r\n");
      out.write("\t\t\t        var modalContentDiv = this.createElement('div', {'class': 'modal-content'}, modalDialogDiv);\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // ---------------- Modal Header ----------------\r\n");
      out.write("\t\t\t        var modalHeaderDiv = this.createElement('div', {'class': 'modal-header'}, modalContentDiv);\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // Close Header\r\n");
      out.write("\t\t\t        if(data.closeBtn){\r\n");
      out.write("\t\t\t            var modalHeaderCloseBtn = this.createElement('button', {'type': 'button', 'class': 'close', 'data-dismiss': 'modal', 'aria-hidden': 'true'}, modalHeaderDiv);\r\n");
      out.write("\t\t\t            modalHeaderCloseBtn.innerHTML ='x';\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // title\r\n");
      out.write("\t\t\t        var modalHeaderTitle = this.createElement('h4', {'class': 'modal-title', 'id': this.DialogInfo.titleId}, modalHeaderDiv);\r\n");
      out.write("\t\t\t        modalHeaderTitle.innerHTML = data.title ? data.title : this.Message.title;\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // ---------------- Modal Body ----------------\r\n");
      out.write("\t\t\t        var modalBodyDiv = this.createElement('div', {'class': 'modal-body', 'style': 'word-break: break-all'}, modalContentDiv);;\r\n");
      out.write("\t\t\t        modalBodyDiv.innerHTML = data.content ? data.content : '';\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // ---------------- Modal Footer ----------------\r\n");
      out.write("\t\t\t        var modalFooterDiv = this.createElement('div', {'class': 'modal-footer'}, modalContentDiv);\r\n");
      out.write("\t\t\t        // Cancle Button\r\n");
      out.write("\t\t\t        if(data.dialogType == 'confirm'){\r\n");
      out.write("\t\t\t            var modalFooterCancleBtn = this.createElement('button', {'type': 'button', 'class': 'btn btn-default', 'data-dismiss': 'modal'}, modalFooterDiv);\r\n");
      out.write("\t\t\t            modalFooterCancleBtn.innerHTML = this.Message.cancel;            \r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        // Ok Button\r\n");
      out.write("\t\t\t        var modalFooterOkAttr = {'type': 'button', 'class': 'btn btn-primary', 'id': this.DialogInfo.okBtnId};\r\n");
      out.write("\t\t\t        if(data.dialogType == 'alert'){\r\n");
      out.write("\t\t\t            modalFooterOkAttr['data-dismiss'] = 'modal';\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        var modalFooterOkBtn = this.createElement('button', modalFooterOkAttr, modalFooterDiv);\r\n");
      out.write("\t\t\t        modalFooterOkBtn.innerHTML = this.Message.ok;\r\n");
      out.write("\t\t\t        /***************************************************************************/\r\n");
      out.write("\t\t\t        // Modal Default option Setting        \r\n");
      out.write("\t\t\t        var modalOption = {\r\n");
      out.write("\t\t\t            keyboard: false // ESC 키 눌렀을때 모달을 닫음\r\n");
      out.write("\t\t\t            ,backdrop: 'static' // 모달의 배경을 포함. 클릭 시 모달을 닫지 않을 시 'static'\r\n");
      out.write("\t\t\t            ,show: false // 초기화 시 모달을 보여줍니다.\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        // 사용자 지정 정보 설정\r\n");
      out.write("\t\t\t        $.extend(modalOption, data);\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // Jquery Dialog 변수 선언\r\n");
      out.write("\t\t\t        var dialog = $('#' + data.dialogId);\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // Bootstrap Modal Setting\r\n");
      out.write("\t\t\t        dialog.modal(modalOption)        \r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // Modal의 hide가 완료된 이후 Event 실행\r\n");
      out.write("\t\t\t        dialog.on('hidden.bs.modal', function(e){\r\n");
      out.write("\t\t\t            // Modal Element 제거\r\n");
      out.write("\t\t\t            dialog.remove();\r\n");
      out.write("\t\t\t        });\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // Confirm 일 경우 확인 버튼 클릭 이벤트 지정\r\n");
      out.write("\t\t\t        if(data.dialogType == 'confirm'){\r\n");
      out.write("\t\t\t            dialog.find(\" #\" + this.DialogInfo.okBtnId).on('click', function(){\r\n");
      out.write("\t\t\t                // ok button event function 실행\r\n");
      out.write("\t\t\t                if(data.ok && typeof(data.ok) === 'function'){\r\n");
      out.write("\t\t\t                    data.ok();\r\n");
      out.write("\t\t\t                }else{\r\n");
      out.write("\t\t\t                    console.warn('not function ok event. dialogId: ' + data.dialogId);\r\n");
      out.write("\t\t\t                }\r\n");
      out.write("\t\t\t                \r\n");
      out.write("\t\t\t                // Modal 창 닫기\r\n");
      out.write("\t\t\t                dialog.modal('hide');\r\n");
      out.write("\t\t\t                // click enevt 제거\r\n");
      out.write("\t\t\t                $(this).off('click');\r\n");
      out.write("\t\t\t            });    \r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        \r\n");
      out.write("\t\t\t        // Modal Dialog Show\r\n");
      out.write("\t\t\t        dialog.modal('show');\r\n");
      out.write("\t\t\t    },        \r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    /**\r\n");
      out.write("\t\t\t    * Modal Dialog Show\r\n");
      out.write("\t\t\t    */\r\n");
      out.write("\t\t\t    show: function(type, data){\r\n");
      out.write("\t\t\t        if(!data){data = {};}\r\n");
      out.write("\t\t\t        data.dialogType = type ? type : 'alert';\r\n");
      out.write("\t\t\t        this.makeModalDialog(data);\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    /**\r\n");
      out.write("\t\t\t    * Alert Modal Dialog\r\n");
      out.write("\t\t\t    *\r\n");
      out.write("\t\t\t    * data: \r\n");
      out.write("\t\t\t    *  title: Dialog Title Message\r\n");
      out.write("\t\t\t    *  content: Dialog Content Message\r\n");
      out.write("\t\t\t    *  closeBtn: Header Close Btn(x)\r\n");
      out.write("\t\t\t    *  \r\n");
      out.write("\t\t\t    */    \r\n");
      out.write("\t\t\t    alert: function(data){\r\n");
      out.write("\t\t\t        // data가 Object 가 아닌 경우 content 로 설정한다.\r\n");
      out.write("\t\t\t        if(typeof(data) != 'object'){\r\n");
      out.write("\t\t\t            var content = data;\r\n");
      out.write("\t\t\t            data = {content: content};\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t        this.show('alert', data);\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    /**\r\n");
      out.write("\t\t\t    * Confirm Modal Dialog\r\n");
      out.write("\t\t\t    *\r\n");
      out.write("\t\t\t    * data: \r\n");
      out.write("\t\t\t    *  title: Dialog Title Message\r\n");
      out.write("\t\t\t    *  content: Dialog Content Message\r\n");
      out.write("\t\t\t    *  ok: Ok Button Click Event function\r\n");
      out.write("\t\t\t    *  closeBtn: Header Close Btn(x)\r\n");
      out.write("\t\t\t    *  \r\n");
      out.write("\t\t\t    */\r\n");
      out.write("\t\t\t    confirm: function(data){\r\n");
      out.write("\t\t\t        this.show('confirm', data);\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t    $(function () { \r\n");
      out.write("\t\t\t            $(\"#modalBtn\").on('click', function(){\r\n");
      out.write("\t\t\t                Common.Dialog.alert({\r\n");
      out.write("\t\t\t                    title: '경고'\r\n");
      out.write("\t\t\t                    ,content: 'Object Setting Alert.',\r\n");
      out.write("\t\t\t                });    \r\n");
      out.write("\t\t\t            });    \r\n");
      out.write("\t\t\t            \r\n");
      out.write("\t\t\t            $(\"#modalBtn2\").on('click', function(){\r\n");
      out.write("\t\t\t                Common.Dialog.alert('Not Object Setting Alert.');                    \r\n");
      out.write("\t\t\t            });    \r\n");
      out.write("\t\t\t            \r\n");
      out.write("\t\t\t            $(\"#modalBtn1\").on('click', function(){\r\n");
      out.write("\t\t\t                Common.Dialog.confirm({\r\n");
      out.write("\t\t\t                    content: '이것을 하시겠습니까?'\r\n");
      out.write("\t\t\t                    ,ok: function(){\r\n");
      out.write("\t\t\t                        console.log('확인 클릭');\r\n");
      out.write("\t\t\t                    }\r\n");
      out.write("\t\t\t                });    \r\n");
      out.write("\t\t\t            });\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
