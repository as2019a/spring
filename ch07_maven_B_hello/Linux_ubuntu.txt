1. 자바 설치
1-1. 자바설지
sudo apt-get update
sudo apt-get install openjdk-8-jdk

1-2.자바 경로 환경변수에 등록
/user/lib/jvm//java-8-openjdk-amg64/
vi .bash_profile
"export JAVA_HOME=/user/lib/jvm//java-8-openjdk-amd64/"
source .bash_profile
echo $JAVA_HOME

1-3. 명령어

rpm to deb 터미널 명령어 :  sudo alien -k --script /home/jxlove/바탕화면/파일명.rpm

ls (=dir) : 폴더검색

cd 폴더명 : 폴더 내로 진입

폴더 내로 진입 한뒤에  sudo alien -k --script 파일명.rpm  해도 됨

./파일명 ; 파일 실행  -  ex) ./vmware-install.pl

sudo : super do  -  ex) sudo ./vmware-install.pl

whereis 파일명  :  파일 검색

root 계정 사용 : sudo passwd root
암호 입력
암호 확인 재입력

su root 
암호 입력

그 다음에 재부팅 후 로그인 부분에서 아래쪽 기타를 선택하고 root를 입력 후 엔터를 치고 암호를 입력하면
root계정으로 로그인 된다.

간단하게 부분적 root 권한을 얻고 싶으면 sudo -s 를 치면 root권한을 얻을 수 있다.


[Linux] cd 뭐여???
cd : Change Directory

말그대로 디렉토리를 옮기는 명령어입니다. 

윈도우즈에서는 디렉토리를 폴더라는 이름으로 사용하는데요. 리눅스에서는 디렉토리라는 이름을 사용하네요. 


여기서 설명이 들어갔습니다. 

리눅스에서는 모든것이 파일의 의미로 통한다고 합니다. 

디렉토리도 파일, 이미지도 파일, 동영상도 파일, 음악도 파일.
다른부분은 윈도우와 같지만 디렉토리를 파일로 본다는건 윈도우와 조금 다르네요. 
중요한 이야기는 아니구요. 그냥 그렇구나...하고 이해하시면 될듯 합니다. 

이번에는 이름에 대해서 이야기를 합니다. 

이름. 즉 파일 이름은 256자가 가능합니다. 그리고 확장자의 의미가 없습니다. 또한 소문자와 대문자를 구분합니다. 

예를 들어서 

$ Text
$ text
이 둘은 완전히 다른 이름이라는것이죠. 

또한 

$ text.text
와 같이 확장자 부분을 txt라고 지정을 해도 이파일이 텍스트 파일이라는 법은 없습니다. 리눅스는 확장자를 의미부여 하지 않기 때문입니다. 


이제 정통적인 방법의 디렉토리 이동을 알아보도록 합니다. 

콘솔창을 열고 다음과 같이 칩니다. 

$ cd .

변함이 없습니다. 
. 은 현재의 디렉토리라는 말입니다. 그러니까 지금현재의 디렉토리로 이동해라! 라는 명령을 내린거죠. 

다음....

$ cd ..

이번에는 디렉토리가 변경되었습니다. 
..은 상위디렉토리를 나타냅니다. 

방금 살펴본 두가지의 디렉토리 이동을 상대적 디렉토리 이동이라고 합니다. 
이번에는 절대적 디렉토리 이동을 알아보도록 합니다. 

리눅스에서 / 은 최상위 디렉토리를 말합니다. 

$ cd /

이렇게 하면 최상위로 넘어가겠네요. 

그럼 이번에는 

$cd /tmp/kde-knoppix

그럼 한번에 해당 디렉토리로 이동을 합니다. 
한번에 해당 디렉토리까지 이동할수 있는 장점이 있지만 언제나 풀 패스를 알아야 하는 단점이 있겠네요. 
나중에 배우겠지만 이런 단점을 보안하기 위해서 Stack을 이용하기도 합니다. 
나중에 알게되는 pop 솨 push 명령을 배우면 잘 사용하시기 바랍니다. 

이번에는 색다른 명령어를 배워보도록 하겠습니다. 

$ cd

달랑저거만????ㅋㅋ
위의 명령어를 치면 어디로 움직이나요?
바로 자기자신의 홈디렉토리로 옮겨집니다. 

저는 지금 

/home/Knoppix

로 이동을 했네요. 

방금 배운 cd명령은 너무나도 자주 사용하는 명령어이니까 꼭 사용법을 익혀두시기 바랍니다. manual 참조.^^


[Linux] Directory 관련 명령어들..

$ pwd

(Present Working Directory)

현재 작업하고 있는 디렉토리의 완전경로를 뿌려줍니다. 
여러가지 작업을 하면서 지금 자신이 어디 있는지 알고 싶을때 사용하면 좋을 명령어이겠네요. 


$ cd

(Change Directory)

말 그대로 디렉토리를 변경할때 사용합니다. 이 명령어는 지난시간에 언급을 했기 때문에 그냥 넘어가도록 하겠습니다. 


$ mkdir

(Make Directory)

디렉토리를 만드는 명령어 입니다. 그냥 딱 봐도 옵션이 많을것 같습니다. 옵션을 찾아봐서 참고하시길 바랍니다. 
어떤 식으로 디렉토리를 만드는지......어떤 속성을 지니고 만들지....모두 중요합니다. 


$ rmdir

(Remove Directory)

디렉토리를 삭제할때 사용합니다. 주의하실 점은 디렉토리 안이 비어있어야 삭제가 된다는 점입니다. 내용이 있을경우에는 지워지지 않습니다. 메세지만 뜨고 마네요. 하지만 한방에 지울수 있는 방법도 있기는 합니다. 
옵션을 참고하시구요. 정리해두시기 바랍니다. 


------------------------
지금부터 볼 명령어들이 가장 실생활에서 많이 쓰이는 명령어 입니다. 반드시 숙지해두세요~

$ pushd
$ popd
$ dirs

Stack이라고 하는 컴퓨터에서 사용하는 저장소의 종류가 있습니다. Stack을 자세히 설명하려면 컴퓨터 아키텍쳐까지 올라가기 때문에 자세히는 설명하지 않겠습니다. 단순히 항아리 구조의 저장소라고 생각하시면 될것 같습니다. 
특징은 FILO (First In Last Out)입니다. 
제일 먼저 들어간 자료는 제일 마지막에 나온다는 소리이죠. 항아리에 자료를 저장하면 제일먼저 넣은 자료는 가장 밑에 깔리게 되어서 그 자료를 꺼내기 위해서는 위에 쌓여있는 자료를 먼저 꺼내야 겠지요?
반대로 말해서는 가장 마지막에 넣은 자료는 가장 위에 올려 있기 때문에 가장 먼저 꺼낼수 있습니다. 
이런 특징을 가진 자료구조를 Stack이라고 합니다. 
pushd & popd가 그런 특징을 가진 경로저장 명령어입니다. 

$ pushd 를 이용해서 현재경로나 원하는 경로를 저장하면 순서대로 저장이 됩니다. 

그럼 $ popd를 이용해서 저장된 역순으로 경로를 점프하면서 바꿀수 있는것이지요. 

우리가 $ pushd를 이용해서 여러 경로를 집어넣었다면 지금 Stack의 저장된 경로를 다 보려면 $ dirs 를 이용합니다. 

그럼 왼쪽이 가장 마지막에 입력된 경로가 되겠구요. 가장 오른쪽이 제일 처음에 입력된 경로가 될것입니다. 
이때  $ popd를 하게 되면 가장 왼쪽의 경로가 나와서 그쪽으로 이동하게 되는것입니다. 

그럼 이 stack구조의 경로저장의 단점이 있을것입니다. 
중간을 건너띄우고 원하는 저장된 경로로 가려고 할때는 그 전에 쌓여있는 경로를 모두 빼내고 가야 하는 단점이 바로 그것입니다. 
바로 이런 단점을 커버하기 위한 것이  

$ popd +숫자

입니다. 
숫자를 넣게 되면 위쪽으로 부터 몇번째 있는 경로로 이동을 하게 됩니다. 그럼 해당위치의 경로가 빠져나오게 되고 다시 그 자리는 채워지게 되는것이죠. 
반드시!!!!!!!!!!!!!!!! 한번씩 실험을 해보시길 부탁드립니다. 
정말 유용하게 사용하실수 있습니다. 

창을 여러개 띄워놓고 콘솔을 만지는것도 좋지만 방금전에 작업을 했던 경로를 푸쉬해 놓고 팝으로 돌아가는것도 매우 유용하기 때문입니다. 

[Linux] 리눅스 기본 명령어 모음


alias(명령어 간소화하기) 
apropos(관련된 명령어 찾기) 
arch(컴퓨터 종류 알기) 
arp(같은 서브넷의 IP 보여주기) 
at(작업 시간 정하기) 
atd(계획성 있는 작업 실행하기) 
awk(특정 패턴 문자 처리하기) 
a2p(펄 파일로 바꾸기) 
badblocks(배드 블럭 검사하기) 
bc(계산기) 
biff(메일 수신 소리로 확인하기) 
bg(후면작업; 배경화면 설정) 
bind(키나 함수 순서 결합하기) 
break(루프 빠져나가기) 
cal(달력보기) 
builtin(내부 명령어 알아보기) 
case(조건 처리하기) 
cat(화면상에서 파일 보기) 
cd(디렉토리 변경하기) 
cfdisk(디스크 설정하기) 
chattr(파일 속성 변경하기) 
chfn(사용자 정보 변경하기) 
chgrp(파일, 디렉토리가 속했던 그룹 바꾸기) 
chmod(파일 권한 바꾸기) 
chown(파일 주인 바꾸기) 
chsh(지정된 셸 바꾸기) 
cksum(CRC값을 점검한다) 
clear(화면 청소하기) 
clock(CMOS 시각을 조정하기) 
cmp(파일 비교하기) 
colcrt(문자 변환 필터) 
colrm(열 삭제하기) 
column(가로 정렬하기) 
comm(파일 비교 출력하기) 
command(명령어 알아보기) 
continue(루프 계속돌기) 
cp(파일 복사하기) 
cpio(복사본 만들기) 
crontab(cron을 관리한다) 
csplit(파일에 서식, 규칙 정하기) 
cut(필요한 필드만 출력하기) 
date(날짜 보기) 
dd(블럭장치 읽고 쓰기) 
debugfs(ext2 파일 시스템 디버깅하기) 
declare(변수 선언하기) 
df(파일 시스템의 사용량 보기) 
dirs(디렉토리 목록 표시하기) 
dmesg(부팅 메시지 보기) 

(X윈도우 환경에서 printk 메세지를 기본으로 못보는데 dmesg를 통해서 확인할수 있다)
dnsdomainname(DNS 이름 출력) 
domainname(NIS 이름 출력&설정) 
du(디렉토리와 파일의 용량 파악하기) 
dumpe2fs(파일 시스템 정보 보기) 
echo(표준 출력하기) 
eject(장치 해제하기) 
elm(메일 관련) 
enable(내부 명령어 지정) 
env(환경변수 출력하기) 
eval(인수 읽기) 
exec(셸 명령어 실행하기) 
exit(종료하기) 
expand(탭을 공백으로 변환하기) 
export(변수 지정하기) 
e2fsck(파일 시스템 복구하기) 
fc(지정된 편집기 받기) 
fdformat(플로피 디스크 포맷하기) 
fdisk(파티션 나누기) 
fg(지정된 작업을 전면 프로세스로 시작하기) 
file(파일 종류 보기) 
find(파일 찾기) 
finger(사용자 정보 알기) 
fold(정형화하기) 
fmt(정형화하기) 
for(반복 실행하기) 
free(메모리 사용량 알아보기) 
fsck(파일 시스템 검사하기) 
fstab(파일 시스템에 대한 고정적인 정보 저장하기) 
ftp(파일 전송 프로그램) 
fuser(프로세스 ID 출력) 
getkeycodes(매핑 테이블 출력하기) 
grep(특정 문자(열) 검색하기) 
gzexe(실행 파일 압축하기) 
gzip(압축하기) 
halt(시스템 종료하기) 
hash(기억해 두기; index 역할) 
head(파일의 앞부분 출력하기) 
help(도움말 보여주기) 
host(호스트 정보 보기) 
history(사용 명령어 목록보기) 
hostname(서버 이름 알기) 
id(계정 정보 알기) 
if(조건문 실행하기) 
ifconfig(랜카드에 주소 할당하기) 
imolamod(모듈 설치하기) 
inetd(인터넷 서비스의 최상위 데몬) 
init(실행 단계 정하기) 
ispell(철자법 검사하기) 
jobs(수행중인 프로세스 알기) 
kbd_mode(키보드 모드 출력하기) 
kill(프로세스 죽이기)  강제종료 (kill -9  PID)
klogd(커널 로그 데몬) 
ldd(공유 라이브러리의 의존성 알기) 
less(페이지 단위로 출력하기) 
let(정규식 표현하기) 
lilo(부팅하기) 
ln(링크하기) 
locate(패턴에 맞는 파일 찾기) 
login(로그인하기) 
logger(시스템 로그 기록하기) 
logname(사용자 로그인명 보여주기) 
logout(로그인 셸 종료하기) 
look(특정 단어 검색하기) 
losetup(중복 장치 확인하기) 
lpd(프린트 데몬) 
lpq(현재 프린트 작업 상태 출력하기) 
lpr(출력하기) 
lprm(대기열에 있는 문서 삭제하기) 
ls(디렉토리 내용보기) 
lsattr(파일 시스템의 속성 보여주기) 
lsdev(하드웨어 장치 출력하기) 
lsmod(모듈 정보 출력하기) lnsmod(묘둘 올리기) rmmod (모듈 내리기)
mail(메일 관련) 
make(컴파일하기) 
man(매뉴얼 보기) 
mattrib 
mbadblocks 
mcd 
mcopy 
mdel 
mdeltree 
mdir 
mesg(메시지를 받을 수 있는지 확인하기) 
mformat 
minfo 
mkdir (디렉토리 만들기) 
mke2fs(파일 시스템 생성하기) 
mkfs(파일 시스템 만들기) 
mknod(특수 파일 만들기) 
mkswap(스왑 영역 지정하기) 
mlabel 
mmd 

mount 
mmount 
mmove 
mpartition 
mount(장치 연결하기) 
more(화면 단위로 출력하기)  ls -al | more
mrd 
mren 
mtoolstest 
mtype 
mutt(메일 관련) 
mv(파일 옮기기) 
mzip 
netstat(현재 네트웍 상황 보기) 
nice(프로세스 우선 순위 변경하기) 
od(8진수로 파일 보기) 
passwd(암호 입력하기) 
pidof(실행중인 프로그램의 프로세스 ID 찾기) 
pine(메일 관련) 
ping(네트웍 확인하기) 
popd(pushd 취소) 
ps(프로세스 상태 알기) ps -aux
pstree(프로세스 상관관계 알기) 
pwd(절대경로 보여주기) 
quota(디스크 한계량 알기) 
rarp(rarp 테이블 관리하기) 
rcp(원격 호스트에 파일 복사하기) 
rdev(루트, 스왑장치, 램 크기, 비디오 모드를 조사하고 설정하기) 
rdate(네트웍으로 시간 설정하기) 
reboot(재부팅하기) 
readonly(읽기 전용으로 표시하기) 
renice(프로세스 우선 순위 바꾸기) 
reset(터미널 초기화하기) 
restore(다시 저장하기) 
rlogin(바로 접속하기) 
rm(파일 지우기) 
rmdir (디렉토리 지우기) rm -rf
route(라우팅 테이블 추가/삭제하기) 
rpm(프로그램 추가/삭제) 
rpm2cpio(rpm을 cpio로 변환하기) 
rsh(원격으로 명령어 실행하기) 
rup(호스트 상태 출력하기) 
rusers(호스트에 로그인한 사용자 출력하기) 
rwall(호스트 사용자에게 메시지 뿌리기) 
script(기록하기) 
set(변수값 설정하기) 
setup(시스템 관련 설정하기) 
showmount(호스트의 마운트 정보 보여주기) 
shutdown(전원 끄기) 
sleep(잠시 쉬기) 
source(스크립트 번역하기) 
split(파일 나누기) 
ssh(암호화된 원격 로그인하기) 
stty(터미널라인 설정 보여주기) 
su(계정 바꾸기) 
suspend(셸 중단하기) 
swapoff (스왑 해제하기) 
swapon(스왑 활성화하기) 
sync(버퍼 재설정하기) 
syslogd(로그인 과정 설정하기) 
tac(거꾸로 보기) 
tail(문서 끝부분 출력하기) 
talk(이야기하기) 
tar(파일 묶기) 
tcpdchk(tcp wrapper 설정하기) 
tcpmatch(네트웍 요청에 대해 예측하기) 
tee(표준 입력으로부터 표준 출력 만들기) 
telnet(원격접속하기) 
test(테스트하기) 
times(셸에서의 사용자와 시스템 시간 출력하기) 
top(cpu 프로세스 상황 보여주기) 
tr(문자열 바꿔주기) 
true(종료 코드 리턴하기) 
type(유형 보기) 
ul(밑줄 처리해서 보여주기) 
ulimit(제한하기) 
umask(매스크 모드 설정하기) 
umount(장치 해제하기) 
unalias(별명 제거하기) 
uname(시스템 정보 보기) 
unexpand(공백 문자를 탭으로 변환하기) 
uniq(중복된 문장 찾기) 
useradd(사용자 계정 만들기) 
userdel(계정 삭제하기) 
usermod(사용자 계정정보 수정하기) 
unset(설정 변수 해제) 
uptime(시스템 부하 평균 보여주기) 
users(로그인된 사용자 보여주기) 
w(시스템에 접속한 사용자 상황 알아보기) 
wait(프로세스 기다리기) 
wall(모든 사용자에게 메시지 보내기) 
wc(문자, 단어, 라인수 세기) 
whatis(명령어의 간단한 설명보기) 
while(루프 명령어) 
who(사용자 알기) 
write(콘솔 상에서 간단한 메시지 보내기) 
xcopy(반복적으로 복사하기) 
XFree86 
ypchfn(NIS에서 사용하는 chfn 명령어) 
ypchsh(NIS에서 사용하는 chsh 명령어) 
yppasswd(NIS에서 사용하는 passwd 명령어) 
zcat(압축 파일 보기) 
zcmp(압축 파일 비교하기) 
zforce(강제로 gz 만들기) 
zgrep(압축 상태에서 grep 실행하기) 
zmore(압축 상태에서 more 실행하기) 
znew(.Z 파일을 .gz로 다시 압축하기)

출처 : http://yahweh0.blog.me 

출처: https://delirussum.tistory.com/76 [jihoon Docs]

2. 톰캣 설치

sudo apt-get install tomcat8 tomcat8-admin
//상태확인
service tomcat8 status
//톰캣시작
service tomcat8 start
//톰캣종료
service tomcat8 stop
//톰캣재실행
service tomcat8 restart

Tomcat

It works !
If you're seeing this page via a web browser, it means you've setup Tomcat successfully. Congratulations!

This is the default Tomcat home page. It can be found on the local filesystem at: /var/lib/tomcat8/webapps/ROOT/index.html

Tomcat8 veterans might be pleased to learn that this system instance of Tomcat is installed with CATALINA_HOME in /usr/share/tomcat8 and CATALINA_BASE in /var/lib/tomcat8, following the rules from /usr/share/doc/tomcat8-common/RUNNING.txt.gz.

You might consider installing the following packages, if you haven't already done so:

tomcat8-docs: This package installs a web application that allows to browse the Tomcat 8 documentation locally. Once installed, you can access it by clicking here.

tomcat8-examples: This package installs a web application that allows to access the Tomcat 8 Servlet and JSP examples. Once installed, you can access it by clicking here.

tomcat8-admin: This package installs two web applications that can help managing this Tomcat instance. Once installed, you can access the manager webapp and the host-manager webapp.

NOTE: For security reasons, using the manager webapp is restricted to users with role "manager-gui". The host-manager webapp is restricted to users with role "admin-gui". 
Users are defined in /etc/tomcat8/tomcat-users.xml.

